import { Directive, EventEmitter, ElementRef, Input, NgZone } from '@angular/core';
import * as Handsontable from 'handsontable/dist/handsontable.full.js';
var eventNames = ['afterAddChild', 'afterBeginEditing', 'afterCellMetaReset', 'afterChange', 'afterChangesObserved', 'afterColumnMove', 'afterColumnResize', 'afterColumnSort', 'afterContextMenuDefaultOptions', 'afterContextMenuHide', 'afterContextMenuShow', 'afterCopy', 'afterCopyLimit', 'afterCreateCol', 'afterCreateRow', 'afterCut', 'afterDeselect', 'afterDestroy', 'afterDetachChild', 'afterDocumentKeyDown', 'afterDropdownMenuDefaultOptions', 'afterDropdownMenuHide', 'afterDropdownMenuShow', 'afterePaste', 'afterFilter', 'afterGetCellMeta', 'afterGetColHeader', 'afterGetColumnHeaderRenderers', 'afterGetRowHeader', 'afterGetRowHeaderRenderers', 'afterInit', 'afterLoadData', 'afterModifyTransformEnd', 'afterModifyTransformStart', 'afterMomentumScroll', 'afterOnCellCornerDblClick', 'afterOnCellCornerMouseDown', 'afterOnCellMouseDown', 'afterOnCellMouseOver', 'afterOnCellMouseOver', 'afterPluginsInitialized', 'afterRedo', 'afterRemoveCol', 'afterRemoveRow', 'afterRender', 'afterRenderer', 'afterRowMove', 'afterRowResize', 'afterScrollHorizontally', 'afterScrollVertically', 'afterSelection', 'afterSelectionByProp', 'afterSelectionEnd', 'afterSelectionEndByProp', 'afterSetCellMeta', 'afterSetDataAtCell', 'afterSetDataAtRowProp', 'afterTrimRow', 'afterUndo', 'afterUntrimRow', 'afterUpdateSettings', 'afterValidate', 'afterViewportColumnCalculatorOverride', 'afterViewportRowCalculatorOverride', 'beforeAddChild', 'beforeAutofill', 'beforeAutofillInsidePopulate', 'beforeCellAlignment', 'beforeChange', 'beforeChangeRender', 'beforeColumnMove', 'beforeColumnResize', 'beforeColumnSort', 'beforeContextMenuSetItems', 'beforeCopy', 'beforeCreateCol', 'beforeCreateRow', 'beforeCut', 'beforeDetachChild', 'beforeDrawBorders', 'beforeDropdownMenuSetItems', 'beforeFilter', 'beforeGetCellMeta', 'beforeInit', 'beforeInitWalkontable', 'beforeKeyDown', 'beforeOnCellMouseDown', 'beforeOnCellMouseOut', 'beforeOnCellMouseOver', 'beforePaste', 'beforeRedo', 'beforeRemoveCol', 'beforeRemoveRow', 'beforeRender', 'beforeRenderer', 'beforeRowMove', 'beforeRowResize', 'beforeSetRangeEnd', 'beforeSetRangeStart', 'beforeStretchingColumnWidth', 'beforeTouchScroll', 'beforeUndo', 'beforeValidate', 'beforeValueRender', 'beforeValueRender', 'construct', 'hiddenColumn', 'hiddenRow', 'init', 'manualRowHeights', 'modifyAutofillRange', 'modifyCol', 'modifyColHeader', 'modifyColumnHeaderHeight', 'modifyColWidth', 'modifyCopyableRange', 'modifyData', 'modifyRow', 'modifyRowHeader', 'modifyRowHeaderWidth', 'modifyRowHeight', 'modifyRowSourceData', 'modifyTransformEnd', 'modifyTransformStart', 'persistentStateLoad', 'persistentStateReset', 'persistentStateSave', 'skipLengthCache', 'unmodifyCol', 'unmodifyRow'];
export var HotTable = (function () {
    function HotTable(element, ngZone) {
        var _this = this;
        this.element = element;
        this.ngZone = ngZone;
        this.data = [];
        this.zoneQueue = [];
        this.zoneQueueTimeout = 0;
        // fill events dynamically
        eventNames.forEach(function (eventName) {
            _this[eventName] = new EventEmitter();
        });
    }
    HotTable.prototype.parseAutoComplete = function (options) {
        var inst = this.inst;
        var columns = this.columns || options.columns;
        var dataSet = options.data;
        if (columns) {
            columns.forEach(function (column) {
                if (typeof column.source === 'string') {
                    var relatedField_1 = column.source;
                    column.source = function (_query, process) {
                        var row = inst.getSelected()[0];
                        var data = dataSet[row];
                        if (!data) {
                            return;
                        }
                        var fieldParts = relatedField_1.split('.');
                        var o = data;
                        for (var i = 0; i < fieldParts.length; i++) {
                            o = o[fieldParts[i]];
                        }
                        process(o.map(function (item) {
                            return !column.optionField ? item : item[column.optionField];
                        }));
                    };
                }
            });
        }
    };
    HotTable.prototype.ngOnInit = function () {
        var _this = this;
        this.checkInputs();
        this.view = document.createElement('div');
        this.view.class = 'handsontable-container';
        this.element.nativeElement.appendChild(this.view);
        var options = this.getCurrentOptions();
        this.ngZone.runOutsideAngular(function () {
            _this.inst = new Handsontable(_this.view, options);
        });
        this.parseAutoComplete(options);
        if (this.pagedData$) {
            this.data = [];
            this.pagedDataSubscription = this.pagedData$.subscribe(function (newPagedData) {
                Array.prototype.push.apply(_this.data, newPagedData);
                _this.inst.loadData(_this.data);
                _this.parseAutoComplete(options);
                _this.inst.updateSettings(options);
            });
        }
    };
    HotTable.prototype.ngOnDestroy = function () {
        if (this.view && this.view.parentElement) {
            this.view.parentElement.removeChild(this.view);
        }
        if (this.pagedDataSubscription) {
            this.pagedDataSubscription.unsubscribe();
        }
        if (this.inst) {
            this.inst.destroy();
        }
    };
    HotTable.prototype.ngOnChanges = function (changes) {
        if ('options' in changes && this.inst) {
            this.inst.updateSettings(this.getCurrentOptions());
        }
        // tslint:disable-next-line:no-string-literal
        if (changes['data'] && !changes['data'].isFirstChange()) {
            this.inst.loadData(this.data);
        }
    };
    HotTable.prototype.checkInputs = function () {
        var dataCount = Number(!!this.pagedData$) + Number(!!this.data) +
            Number(!!(this.options && this.options.data));
        if (dataCount > 1) {
            console.error('[pagedData], [data] and [options.data] are all mutually' +
                ' exclusive');
            return false;
        }
        else if (dataCount === 0) {
            console.error('One of [pagedData], [data] and [options.data] needs' +
                ' to be provided');
            return false;
        }
    };
    HotTable.prototype.getCurrentOptions = function () {
        var _this = this;
        var htOptions = {
            data: this.data || null
        };
        eventNames.forEach(function (eventName) {
            // Only register the event if the emitter has an observer (i.e., if the output is actually being used)
            if (_this[eventName].observers.length) {
                htOptions[eventName] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    var data = [];
                    // Handsontable event handlers are always called with 6 arguments. Cut off any trailing undefined values.
                    for (var index = args.length; index >= 0; index--) {
                        if (args[index] !== void 0) {
                            data = args.slice(0, index + 1);
                            break;
                        }
                    }
                    // Queue all emissions to only cause 1 Zone.run() call per tick.
                    _this.queueForRunningInZone(function () {
                        _this[eventName].emit(data);
                    });
                };
            }
        });
        var additionalFields = ['colHeaders', 'colWidths', 'columns'];
        additionalFields.forEach(function (field) {
            if (_this[field]) {
                Object.assign(htOptions, (_a = {},
                    _a[field] = _this[field],
                    _a
                ));
            }
            var _a;
        });
        if (this.options) {
            Object.assign(htOptions, this.options);
        }
        return htOptions;
    };
    HotTable.prototype.queueForRunningInZone = function (fn) {
        var _this = this;
        if (this.zoneQueueTimeout) {
            clearTimeout(this.zoneQueueTimeout);
        }
        this.zoneQueue.push(fn);
        this.zoneQueueTimeout = setTimeout(function () {
            _this.ngZone.run(function () {
                _this.zoneQueue.forEach(function (f) { return f(); });
            });
            _this.zoneQueue = [];
            _this.zoneQueueTimeout = 0;
        });
    };
    HotTable.decorators = [
        { type: Directive, args: [{
                    selector: 'hot-table',
                    outputs: eventNames
                },] },
    ];
    /** @nocollapse */
    HotTable.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
    ]; };
    HotTable.propDecorators = {
        'data': [{ type: Input },],
        'pagedData$': [{ type: Input, args: ['pagedData',] },],
        'colHeaders': [{ type: Input, args: ['col-headers',] },],
        'columns': [{ type: Input },],
        'colWidths': [{ type: Input, args: ['col-widths',] },],
        'options': [{ type: Input },],
    };
    return HotTable;
}());
//# sourceMappingURL=handsontable.js.map